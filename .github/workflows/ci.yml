name: CI Build
on:
  push:
    branches:
      - master
    paths-ignore:
    - 'README.md'
    - '.vscode/**'
    - '**.md'
  pull_request:
    branches:
      - master
    paths-ignore:
    - 'README.md'
    - '.vscode/**'
    - '**.md'

jobs:
  tdd-tests:
    runs-on: ubuntu-latest
    container: python:3.11-slim

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Steps for the build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Install OS dependencies
        run: |
          apt-get update
          apt-get install -y gcc libpq-dev

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Code Quality Checks
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 service tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 service tests --count --max-complexity=10 --max-line-length=127 --statistics
          # Run pylint on the service
          pylint service tests --max-line-length=127

      - name: Run unit tests with green
        run: |
          export FLASK_APP=service:app
          green -vvv --processes=1 --run-coverage --termcolor --minimum-coverage=95
        env:
          DATABASE_URI: "postgresql://postgres:postgres@postgres:5432/testdb"

      - name: Upload code coverage
        uses: codecov/codecov-action@v3.1.4
  bdd-tests:
    runs-on: ubuntu-latest
    container: rofrano/pipeline-selenium:latest
    services:
      postgres:
        image: postgres
        env:
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: testdb
        ports:
            - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Install OS dependencies
        run: |
            apt-get update
            apt-get install -y gcc libpq-dev

      - name: Install Python packages
        run: |
            python -m pip install --upgrade pip wheel
            pip install -r requirements.txt

      - name: Run the service locally
        run: |
            echo "\n*** STARTING APPLICATION ***\n"
            gunicorn --log-level=critical --bind=0.0.0.0:8080 service:app &
            sleep 5
            curl -i http://localhost:8080/health
            echo "\n*** SERVER IS RUNNING ***"
        env:
            DATABASE_URI: "postgresql://postgres:postgres@postgres:5432/testdb"

      - name: Run Integration Tests
        run: behave