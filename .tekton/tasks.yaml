apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: git-clone
  annotations:
    operator.tekton.dev/last-applied-hash: 8c9a1bb8d0c565211bf00e0e3c03e378c4892ad8b68ab3db276bbe342b4f34f5
    tekton.dev/categories: Git
    tekton.dev/displayName: git clone
    tekton.dev/pipelines.minVersion: 0.38.0
    tekton.dev/platforms: 'linux/amd64,linux/s390x,linux/ppc64le,linux/arm64'
    tekton.dev/tags: git
  resourceVersion: '904364845'
  uid: a178475d-91ab-47f2-a323-4ccab7d32de6
  creationTimestamp: '2023-11-01T00:26:51Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:operator.tekton.dev/last-applied-hash': {}
            'f:tekton.dev/categories': {}
            'f:tekton.dev/displayName': {}
            'f:tekton.dev/pipelines.minVersion': {}
            'f:tekton.dev/platforms': {}
            'f:tekton.dev/tags': {}
          'f:labels':
            .: {}
            'f:app.kubernetes.io/version': {}
            'f:operator.tekton.dev/operand-name': {}
            'f:operator.tekton.dev/provider-type': {}
          'f:ownerReferences':
            .: {}
            'k:{"uid":"ef4e0b3f-8fea-4a2b-82cb-9acbe866bb74"}': {}
        'f:spec':
          .: {}
          'f:description': {}
          'f:params': {}
          'f:results': {}
          'f:steps': {}
          'f:workspaces': {}
      manager: manifestival
      operation: Update
      time: '2023-11-01T00:26:51Z'
  ownerReferences:
    - apiVersion: operator.tekton.dev/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: TektonInstallerSet
      name: addon-custom-clustertask-n972j
      uid: ef4e0b3f-8fea-4a2b-82cb-9acbe866bb74
  labels:
    app.kubernetes.io/version: '0.9'
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks in
    your Pipeline.

    The git-clone Task will clone a repo from the provided url into the output
    Workspace. By default the repo will be cloned into the root of your
    Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param. This Task also supports sparse checkouts. To perform a
    sparse checkout, pass a list of comma separated directory patterns to this
    Task's sparseCheckoutDirectories param.
  params:
    - description: Repository URL to clone from.
      name: url
      type: string
    - default: ''
      description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
      name: revision
      type: string
    - default: ''
      description: Refspec to fetch before checking out revision.
      name: refspec
      type: string
    - default: 'true'
      description: Initialize and fetch git submodules.
      name: submodules
      type: string
    - default: '1'
      description: 'Perform a shallow clone, fetching only the most recent N commits.'
      name: depth
      type: string
    - default: 'true'
      description: >-
        Set the `http.sslVerify` global git config. Setting this to `false` is
        not advised unless you are sure that you trust your git remote.
      name: sslVerify
      type: string
    - default: ca-bundle.crt
      description: >-
        file name of mounted crt using ssl-ca-directory workspace. default value
        is ca-bundle.crt.
      name: crtFileName
      type: string
    - default: ''
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      name: subdirectory
      type: string
    - default: ''
      description: >-
        Define the directory patterns to match or exclude when performing a
        sparse checkout.
      name: sparseCheckoutDirectories
      type: string
    - default: 'true'
      description: >-
        Clean out the contents of the destination directory if it already exists
        before cloning.
      name: deleteExisting
      type: string
    - default: ''
      description: HTTP proxy server for non-SSL requests.
      name: httpProxy
      type: string
    - default: ''
      description: HTTPS proxy server for SSL requests.
      name: httpsProxy
      type: string
    - default: ''
      description: Opt out of proxying HTTP/HTTPS requests.
      name: noProxy
      type: string
    - default: 'true'
      description: Log the commands that are executed during `git-clone`'s operation.
      name: verbose
      type: string
    - default: >-
        registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:1a50511583fc02a27012d17d942e247813404104ddd282d7e26f99765174392c
      description: The image providing the git-init binary that this Task runs.
      name: gitInitImage
      type: string
    - default: /home/git
      description: |
        Absolute path to the user's home directory.
      name: userHome
      type: string
  results:
    - description: The precise commit SHA that was fetched by this Task.
      name: commit
      type: string
    - description: The precise URL that was fetched by this Task.
      name: url
      type: string
    - description: The epoch timestamp of the commit that was fetched by this Task.
      name: committer-date
      type: string
  steps:
    - env:
        - name: HOME
          value: $(params.userHome)
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: PARAM_REFSPEC
          value: $(params.refspec)
        - name: PARAM_SUBMODULES
          value: $(params.submodules)
        - name: PARAM_DEPTH
          value: $(params.depth)
        - name: PARAM_SSL_VERIFY
          value: $(params.sslVerify)
        - name: PARAM_CRT_FILENAME
          value: $(params.crtFileName)
        - name: PARAM_SUBDIRECTORY
          value: $(params.subdirectory)
        - name: PARAM_DELETE_EXISTING
          value: $(params.deleteExisting)
        - name: PARAM_HTTP_PROXY
          value: $(params.httpProxy)
        - name: PARAM_HTTPS_PROXY
          value: $(params.httpsProxy)
        - name: PARAM_NO_PROXY
          value: $(params.noProxy)
        - name: PARAM_VERBOSE
          value: $(params.verbose)
        - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
          value: $(params.sparseCheckoutDirectories)
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
        - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
          value: $(workspaces.ssl-ca-directory.bound)
        - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
          value: $(workspaces.ssl-ca-directory.path)
      image: $(params.gitInitImage)
      name: clone
      resources: {}
      script: >
        #!/usr/bin/env sh

        set -eu


        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi


        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi


        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi


        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
           if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
           fi
        fi

        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }


        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir || true
        fi


        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"

        test -z "${PARAM_HTTPS_PROXY}" || export
        HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"


        git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"

        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"

        RESULT_SHA="$(git rev-parse HEAD)"

        EXIT_CODE="$?"

        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi

        RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"

        printf "%s" "${RESULT_COMMITTER_DATE}" >
        "$(results.committer-date.path)"

        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"

        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
  workspaces:
    - description: The git repo will be cloned onto the volume backing this Workspace.
      name: output
    - description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
      name: ssh-directory
      optional: true
    - description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
      name: basic-auth
      optional: true
    - description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
      name: ssl-ca-directory
      optional: true

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pylint
  annotations:
    openshift.io/installed-from: Tektonhub
    tekton.dev/categories: Code Quality
    tekton.dev/displayName: pylint
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: 'python, pylint'
  resourceVersion: '1084496460'
  uid: 57cfc34f-b520-44ea-b5b7-73a7f32c13a4
  creationTimestamp: '2023-12-12T06:03:51Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:openshift.io/installed-from': {}
            'f:tekton.dev/categories': {}
            'f:tekton.dev/displayName': {}
            'f:tekton.dev/pipelines.minVersion': {}
            'f:tekton.dev/platforms': {}
            'f:tekton.dev/tags': {}
          'f:labels':
            .: {}
            'f:app.kubernetes.io/version': {}
        'f:spec':
          .: {}
          'f:description': {}
          'f:params': {}
          'f:steps': {}
          'f:workspaces': {}
      manager: Mozilla
      operation: Update
      time: '2023-12-12T06:03:51Z'
  namespace: jay-goettelmann-nyu-dev
  labels:
    app.kubernetes.io/version: '0.3'
spec:
  description: This task will run pylint on the provided input.
  params:
    - default: >-
        registry.gitlab.com/pipeline-components/pylint:0.12.0@sha256:051b701936dfab6fa27bd1ebd50ef56b19577565661bc0227e50dd1cf94a3d6e
      description: The container image with pylint
      name: image
      type: string
    - default: .
      description: The path to the module which should be analysed by pylint
      name: path
      type: string
    - default: requirements.txt
      description: The name of the requirements file inside the source location
      name: requirements_file
      type: string
    - default: []
      description: The arguments to pass to the pylint CLI.
      name: args
      type: array
    - default: pip.conf
      description: The name of the custom pip config file.
      name: pip_conf_file
      type: string
  steps:
    - args:
        - $(params.args)
      env:
        - name: HOME
          value: /tmp/python
        - name: PARAM_PIP_CONF_FILE
          value: $(params.pip_conf_file)
        - name: WORKSPACE_PIP_CONF_BOUND
          value: $(workspaces.pip-conf.bound)
        - name: WORKSPACE_PIP_CONF_PATH
          value: $(workspaces.pip-conf.path)
      image: $(params.image)
      name: pylint
      resources: {}
      script: >
        export PATH=$PATH:$HOME/.local/bin


        if [ "${WORKSPACE_PIP_CONF_BOUND}" = "true" ] ; then
          export PIP_CONFIG_FILE="${WORKSPACE_PIP_CONF_PATH}/${PARAM_PIP_CONF_FILE}"
        fi


        if [ -n "$(params.requirements_file)" ] && [ -e
        "$(params.requirements_file)" ];then
          python -mpip install --user -r "$(params.requirements_file)"
        fi

        pylint $@ "$(params.path)"
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source
    - description: The workspace consisting of the custom pip settings.
      name: pip-conf
      optional: true

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: green
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"tekton.dev/categories":"Testing","tekton.dev/displayName":"green
      tests","tekton.dev/pipelines.minVersion":"0.17.0","tekton.dev/platforms":"linux/amd64","tekton.dev/tags":"python,
      green"},"labels":{"app.kubernetes.io/version":"0.1"},"name":"green","namespace":"jay-goettelmann-nyu-dev"},"spec":{"description":"This
      task can be used to perform unit tests with green.\nIf you define a secret
      with the key `database_uri` it will create an environment variable named
      DATABASE_URI that can be used to connect to a test
      database.","params":[{"default":"-vvv --processes=1 --run-coverage
      --minimum-coverage=95","description":"The additional arguments to be used
      with
      green","name":"ARGS","type":"string"},{"default":"postgres-creds","description":"The
      name of the secret containing a database_uri
      key","name":"SECRET_NAME","type":"string"},{"default":"database_uri","description":"The
      name of the key that contains the database
      uri","name":"SECRET_KEY","type":"string"}],"steps":[{"env":[{"name":"DATABASE_URI","valueFrom":{"secretKeyRef":{"key":"$(params.SECRET_KEY)","name":"$(params.SECRET_NAME)"}}}],"image":"python:3.11-slim","name":"green","script":"#!/bin/bash\nset
      -e\n\necho \"***** Installing dependencies *****\"\npython -m pip install
      --upgrade pip wheel\npip install -qr requirements.txt\n\necho \"*****
      Running Tests *****\"\ngreen
      $(params.ARGS)\n","workingDir":"$(workspaces.source.path)"}],"workspaces":[{"name":"source"}]}}
    tekton.dev/categories: Testing
    tekton.dev/displayName: green tests
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: 'python, green'
  resourceVersion: '1084514332'
  uid: 4e75d204-63f0-492d-a1e8-8e5dabc587cd
  creationTimestamp: '2023-12-12T06:10:50Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
            'f:tekton.dev/categories': {}
            'f:tekton.dev/displayName': {}
            'f:tekton.dev/pipelines.minVersion': {}
            'f:tekton.dev/platforms': {}
            'f:tekton.dev/tags': {}
          'f:labels':
            .: {}
            'f:app.kubernetes.io/version': {}
        'f:spec':
          .: {}
          'f:description': {}
          'f:params': {}
          'f:steps': {}
          'f:workspaces': {}
      manager: kubectl-client-side-apply
      operation: Update
      time: '2023-12-12T06:10:50Z'
  namespace: jay-goettelmann-nyu-dev
  labels:
    app.kubernetes.io/version: '0.1'
spec:
  description: >-
    This task can be used to perform unit tests with green.

    If you define a secret with the key `database_uri` it will create an
    environment variable named DATABASE_URI that can be used to connect to a
    test database.
  params:
    - default: '-vvv --processes=1 --run-coverage --minimum-coverage=95'
      description: The additional arguments to be used with green
      name: ARGS
      type: string
    - default: postgres-creds
      description: The name of the secret containing a database_uri key
      name: SECRET_NAME
      type: string
    - default: database_uri
      description: The name of the key that contains the database uri
      name: SECRET_KEY
      type: string
  steps:
    - computeResources: {}
      env:
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              key: $(params.SECRET_KEY)
              name: $(params.SECRET_NAME)
      image: 'python:3.11-slim'
      name: green
      script: |
        #!/bin/bash
        set -e

        echo "***** Installing dependencies *****"
        python -m pip install --upgrade pip wheel
        pip install -qr requirements.txt

        echo "***** Running Tests *****"
        green $(params.ARGS)
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: deploy-image
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"tekton.dev/categories":"Deployment","tekton.dev/displayName":"deploy
      image","tekton.dev/pipelines.minVersion":"0.17.0","tekton.dev/platforms":"linux/amd64","tekton.dev/tags":"openshift,
      deploy"},"labels":{"app.kubernetes.io/version":"0.1"},"name":"deploy-image","namespace":"jay-goettelmann-nyu-dev"},"spec":{"description":"This
      task will update the deployment.yaml with the latest image name and then
      apply that yaml file and it's service file.","params":[{"description":"The
      fully qualified name of the old image to
      replace","name":"old_image_name","type":"string"},{"description":"The
      fully qualified name of the new image to
      deploy","name":"image_name","type":"string"},{"default":"k8s","description":"The
      directory in source that contains yaml
      manifests","name":"manifest_dir","type":"string"}],"steps":[{"args":["#!/bin/bash\nset
      -e\n\necho Applying manifests in $(inputs.params.manifest_dir)
      directory\n\necho \"*********************  DEPLOYMENT 
      ***********************\"\necho \"Deploying $(inputs.params.image_name)
      ...\"\n\nsed -i
      's|'\"$(inputs.params.old_image_name)\"'|'\"$(inputs.params.image_name)\"'|g'
      $(inputs.params.manifest_dir)/deployment.yaml\ncat
      $(inputs.params.manifest_dir)/deployment.yaml\n\necho
      \"************************************************************\"\necho
      \"OC APPLY...\"\noc apply -f
      $(inputs.params.manifest_dir)/deployment.yaml\noc apply -f
      $(inputs.params.manifest_dir)/service.yaml\n\necho
      \"************************************************************\"\nsleep
      3\necho \"Pods:\"\noc get pods\necho
      \"\""],"command":["/bin/bash","-c"],"image":"quay.io/openshift/origin-cli:latest","name":"deploy","workingDir":"/workspace/source"}],"workspaces":[{"name":"source"}]}}
    tekton.dev/categories: Deployment
    tekton.dev/displayName: deploy image
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: 'openshift, deploy'
  resourceVersion: '1084514334'
  uid: 935f2212-29e1-467d-9f88-dcbe460569cb
  creationTimestamp: '2023-12-12T06:10:50Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
            'f:tekton.dev/categories': {}
            'f:tekton.dev/displayName': {}
            'f:tekton.dev/pipelines.minVersion': {}
            'f:tekton.dev/platforms': {}
            'f:tekton.dev/tags': {}
          'f:labels':
            .: {}
            'f:app.kubernetes.io/version': {}
        'f:spec':
          .: {}
          'f:description': {}
          'f:params': {}
          'f:steps': {}
          'f:workspaces': {}
      manager: kubectl-client-side-apply
      operation: Update
      time: '2023-12-12T06:10:50Z'
  namespace: jay-goettelmann-nyu-dev
  labels:
    app.kubernetes.io/version: '0.1'
spec:
  description: >-
    This task will update the deployment.yaml with the latest image name and
    then apply that yaml file and it's service file.
  params:
    - description: The fully qualified name of the old image to replace
      name: old_image_name
      type: string
    - description: The fully qualified name of the new image to deploy
      name: image_name
      type: string
    - default: k8s
      description: The directory in source that contains yaml manifests
      name: manifest_dir
      type: string
  steps:
    - args:
        - >-
          #!/bin/bash

          set -e


          echo Applying manifests in $(inputs.params.manifest_dir) directory


          echo "*********************  DEPLOYMENT  ***********************"

          echo "Deploying $(inputs.params.image_name) ..."


          sed -i
          's|'"$(inputs.params.old_image_name)"'|'"$(inputs.params.image_name)"'|g'
          $(inputs.params.manifest_dir)/deployment.yaml

          cat $(inputs.params.manifest_dir)/deployment.yaml


          echo "************************************************************"

          echo "OC APPLY..."

          oc apply -f $(inputs.params.manifest_dir)/deployment.yaml

          oc apply -f $(inputs.params.manifest_dir)/service.yaml


          echo "************************************************************"

          sleep 3

          echo "Pods:"

          oc get pods

          echo ""
      command:
        - /bin/bash
        - '-c'
      computeResources: {}
      image: 'quay.io/openshift/origin-cli:latest'
      name: deploy
      workingDir: /workspace/source
  workspaces:
    - name: source
